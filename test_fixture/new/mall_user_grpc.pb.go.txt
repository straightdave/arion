// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MallUserCacheServiceClient is the client API for MallUserCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MallUserCacheServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadReply, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error)
	GetTeamSizes(ctx context.Context, in *GetTeamSizesRequest, opts ...grpc.CallOption) (*GetTeamSizesReply, error)
	GetSubs(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsReply, error)
	GetSubSubs(ctx context.Context, in *GetSubSubsRequest, opts ...grpc.CallOption) (*GetSubSubsReply, error)
	GetOthers(ctx context.Context, in *GetOthersRequest, opts ...grpc.CallOption) (*GetOthersReply, error)
	GetSuperior(ctx context.Context, in *GetSuperiorRequest, opts ...grpc.CallOption) (*GetSuperiorReply, error)
	GetAllSuperiors(ctx context.Context, in *GetAllSuperiorsRequest, opts ...grpc.CallOption) (*GetAllSuperiorsReply, error)
	ChangeSuperior(ctx context.Context, in *ChangeSuperiorRequest, opts ...grpc.CallOption) (*ChangeSuperiorReply, error)
	UpsertUser(ctx context.Context, in *UpsertUserRequest, opts ...grpc.CallOption) (*UpsertUserReply, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error)
}

type mallUserCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMallUserCacheServiceClient(cc grpc.ClientConnInterface) MallUserCacheServiceClient {
	return &mallUserCacheServiceClient{cc}
}

func (c *mallUserCacheServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadReply, error) {
	out := new(ReloadReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamReply, error) {
	out := new(GetTeamReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetTeamSizes(ctx context.Context, in *GetTeamSizesRequest, opts ...grpc.CallOption) (*GetTeamSizesReply, error) {
	out := new(GetTeamSizesReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetTeamSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetSubs(ctx context.Context, in *GetSubsRequest, opts ...grpc.CallOption) (*GetSubsReply, error) {
	out := new(GetSubsReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetSubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetSubSubs(ctx context.Context, in *GetSubSubsRequest, opts ...grpc.CallOption) (*GetSubSubsReply, error) {
	out := new(GetSubSubsReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetSubSubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetOthers(ctx context.Context, in *GetOthersRequest, opts ...grpc.CallOption) (*GetOthersReply, error) {
	out := new(GetOthersReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetOthers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetSuperior(ctx context.Context, in *GetSuperiorRequest, opts ...grpc.CallOption) (*GetSuperiorReply, error) {
	out := new(GetSuperiorReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetAllSuperiors(ctx context.Context, in *GetAllSuperiorsRequest, opts ...grpc.CallOption) (*GetAllSuperiorsReply, error) {
	out := new(GetAllSuperiorsReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetAllSuperiors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) ChangeSuperior(ctx context.Context, in *ChangeSuperiorRequest, opts ...grpc.CallOption) (*ChangeSuperiorReply, error) {
	out := new(ChangeSuperiorReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/ChangeSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) UpsertUser(ctx context.Context, in *UpsertUserRequest, opts ...grpc.CallOption) (*UpsertUserReply, error) {
	out := new(UpsertUserReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/UpsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallUserCacheServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoReply, error) {
	out := new(GetUserInfoReply)
	err := c.cc.Invoke(ctx, "/MallUserCacheService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MallUserCacheServiceServer is the server API for MallUserCacheService service.
// All implementations must embed UnimplementedMallUserCacheServiceServer
// for forward compatibility
type MallUserCacheServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Reload(context.Context, *ReloadRequest) (*ReloadReply, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamReply, error)
	GetTeamSizes(context.Context, *GetTeamSizesRequest) (*GetTeamSizesReply, error)
	GetSubs(context.Context, *GetSubsRequest) (*GetSubsReply, error)
	GetSubSubs(context.Context, *GetSubSubsRequest) (*GetSubSubsReply, error)
	GetOthers(context.Context, *GetOthersRequest) (*GetOthersReply, error)
	GetSuperior(context.Context, *GetSuperiorRequest) (*GetSuperiorReply, error)
	GetAllSuperiors(context.Context, *GetAllSuperiorsRequest) (*GetAllSuperiorsReply, error)
	ChangeSuperior(context.Context, *ChangeSuperiorRequest) (*ChangeSuperiorReply, error)
	UpsertUser(context.Context, *UpsertUserRequest) (*UpsertUserReply, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error)
	mustEmbedUnimplementedMallUserCacheServiceServer()
}

// UnimplementedMallUserCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMallUserCacheServiceServer struct {
}

func (UnimplementedMallUserCacheServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMallUserCacheServiceServer) Reload(context.Context, *ReloadRequest) (*ReloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetTeamSizes(context.Context, *GetTeamSizesRequest) (*GetTeamSizesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamSizes not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetSubs(context.Context, *GetSubsRequest) (*GetSubsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubs not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetSubSubs(context.Context, *GetSubSubsRequest) (*GetSubSubsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubSubs not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetOthers(context.Context, *GetOthersRequest) (*GetOthersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOthers not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetSuperior(context.Context, *GetSuperiorRequest) (*GetSuperiorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperior not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetAllSuperiors(context.Context, *GetAllSuperiorsRequest) (*GetAllSuperiorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSuperiors not implemented")
}
func (UnimplementedMallUserCacheServiceServer) ChangeSuperior(context.Context, *ChangeSuperiorRequest) (*ChangeSuperiorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSuperior not implemented")
}
func (UnimplementedMallUserCacheServiceServer) UpsertUser(context.Context, *UpsertUserRequest) (*UpsertUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUser not implemented")
}
func (UnimplementedMallUserCacheServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedMallUserCacheServiceServer) mustEmbedUnimplementedMallUserCacheServiceServer() {}

// UnsafeMallUserCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MallUserCacheServiceServer will
// result in compilation errors.
type UnsafeMallUserCacheServiceServer interface {
	mustEmbedUnimplementedMallUserCacheServiceServer()
}

func RegisterMallUserCacheServiceServer(s grpc.ServiceRegistrar, srv MallUserCacheServiceServer) {
	s.RegisterService(&_MallUserCacheService_serviceDesc, srv)
}

func _MallUserCacheService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).Reload(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetTeamSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamSizesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetTeamSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetTeamSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetTeamSizes(ctx, req.(*GetTeamSizesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetSubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetSubs(ctx, req.(*GetSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetSubSubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetSubSubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetSubSubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetSubSubs(ctx, req.(*GetSubSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetOthers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOthersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetOthers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetOthers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetOthers(ctx, req.(*GetOthersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetSuperior(ctx, req.(*GetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetAllSuperiors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSuperiorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetAllSuperiors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetAllSuperiors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetAllSuperiors(ctx, req.(*GetAllSuperiorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_ChangeSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).ChangeSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/ChangeSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).ChangeSuperior(ctx, req.(*ChangeSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_UpsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).UpsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/UpsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).UpsertUser(ctx, req.(*UpsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MallUserCacheService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallUserCacheServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MallUserCacheService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallUserCacheServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MallUserCacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MallUserCacheService",
	HandlerType: (*MallUserCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MallUserCacheService_SayHello_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _MallUserCacheService_Reload_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _MallUserCacheService_GetTeam_Handler,
		},
		{
			MethodName: "GetTeamSizes",
			Handler:    _MallUserCacheService_GetTeamSizes_Handler,
		},
		{
			MethodName: "GetSubs",
			Handler:    _MallUserCacheService_GetSubs_Handler,
		},
		{
			MethodName: "GetSubSubs",
			Handler:    _MallUserCacheService_GetSubSubs_Handler,
		},
		{
			MethodName: "GetOthers",
			Handler:    _MallUserCacheService_GetOthers_Handler,
		},
		{
			MethodName: "GetSuperior",
			Handler:    _MallUserCacheService_GetSuperior_Handler,
		},
		{
			MethodName: "GetAllSuperiors",
			Handler:    _MallUserCacheService_GetAllSuperiors_Handler,
		},
		{
			MethodName: "ChangeSuperior",
			Handler:    _MallUserCacheService_ChangeSuperior_Handler,
		},
		{
			MethodName: "UpsertUser",
			Handler:    _MallUserCacheService_UpsertUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MallUserCacheService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall_user.proto",
}
